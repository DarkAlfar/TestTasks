//#stock-service/app.js

// Задание:
// Нужно реализовать 2 сервиса. Один сервис остатков товаров в магазине. У товара могут быть следующие поля:
// - PLU (артикул товара)
// - Название товара
// - Количество товара на полке
// - Количество товара в заказе
// - Для какого магазина данных остаток
// Данные денормализованы, их нужно привести к 2-3 нормальной форме.
// Должны быть следующие endpoint:
// - Создание товара
// - Создание остатка
// - Увеличение остатка
// - Уменьшение остатка
// - Получение остатков по фильтрам (фильтр может быть один, несколько или все)
// -- plu
// -- shop_id
// -- количество остатков на полке (с-по)
// -- количество остатков в заказе (с-по)
// - Получение товаров по фильтрам (фильр может быть один, несколько или все)
// -- name
// -- plu
// Другой сервис истории действий с товарами.
// В сервис “истории действий с товарами” нужно отправлять все события, которые происходят с товарами или остатками (соответственно добавление продукта, создание остатка, увеличение/уменьшение остатка, учитывая, что у добавления продукта нет shop_id, а у остатков он есть). Общение сервисов может происходить любым способом.
// Этот сервис не использует БД, а хранит все данные в памяти.
// Сервис “истории действий с товарами или остатками” должен иметь endpoint, который отдаст историю действий с фильтрами по (фильр может быть один, несколько или все):
// - shop_id
// - plu
// - date (с-по)
// - action
// и постраничной навигацией. Фреймворк так же может быть любой, но не nest. Один из сервисов должен быть на JS, для второго можно использовать TS. СУБД - postgresql

import express from 'express';
import bodyParser from 'body-parser';
import products from "./routes/products.js";
import stock from "./routes/stock.js";

const app = express();
const port = 3001;

app.use(bodyParser.json());

app.use('/products', products);
app.use('/stock', stock);

// app.get('/', (req, res) => {
//
// });

app.listen(port, () => {
  console.log(`Example app listening at http://localhost:${port}`);
});